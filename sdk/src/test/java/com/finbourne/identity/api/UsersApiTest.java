/*
 * FINBOURNE Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1598
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.identity.api;

import com.finbourne.identity.ApiException;
import com.finbourne.identity.model.CreateUserRequest;
import com.finbourne.identity.model.ListUsersResponse;
import com.finbourne.identity.model.LusidProblemDetails;
import com.finbourne.identity.model.LusidValidationProblemDetails;
import com.finbourne.identity.model.TemporaryPassword;
import com.finbourne.identity.model.UpdateUserRequest;
import com.finbourne.identity.model.UserResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * [EARLY ACCESS] CreateUser: Create User
     *
     * Create a new User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        Boolean waitForReindex = null;
        UserResponse response = api.createUser(createUserRequest, waitForReindex);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] DeleteUser: Delete User
     *
     * By default the user will be de-provisioned and inactive, however their record will remain in the identity  provider for audit purposes. If this is not desirable and removal of all trace of the user is required,  the purge parameter can be specified to indicate the details should be purged completely.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String id = null;
        Boolean purge = null;
        api.deleteUser(id, purge);

        // TODO: test validations
    }
    
    /**
     * [BETA] ExpirePassword: Reset the user&#39;s password to a temporary one
     *
     * Resets the user&#39;s password to a temporary one which is then expired
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expirePasswordTest() throws ApiException {
        String id = null;
        TemporaryPassword response = api.expirePassword(id);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] FindUsersById: Find users by id endpoint
     *
     * Finds a maximum of 50 users by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersByIdTest() throws ApiException {
        List<String> id = null;
        ListUsersResponse response = api.findUsersById(id);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] GetUser: Get User
     *
     * Get the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        Boolean includeRoles = null;
        UserResponse response = api.getUser(id, includeRoles);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] ListUsers: List Users
     *
     * List the available Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Boolean includeRoles = null;
        Boolean includeDeactivated = null;
        List<UserResponse> response = api.listUsers(includeRoles, includeDeactivated);

        // TODO: test validations
    }
    
    /**
     * [BETA] ResetFactors: Reset MFA factors
     *
     * Resets the MFA factors of the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetFactorsTest() throws ApiException {
        String id = null;
        api.resetFactors(id);

        // TODO: test validations
    }
    
    /**
     * [BETA] ResetPassword: Reset Password
     *
     * Resets the password of the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        String id = null;
        api.resetPassword(id);

        // TODO: test validations
    }
    
    /**
     * [BETA] SendActivationEmail: Sends an activation email to the User
     *
     * Sends an activation email to the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendActivationEmailTest() throws ApiException {
        String id = null;
        api.sendActivationEmail(id);

        // TODO: test validations
    }
    
    /**
     * [BETA] UnlockUser: Unlock User
     *
     * Unlocks the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlockUserTest() throws ApiException {
        String id = null;
        api.unlockUser(id);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] UpdateUser: Update User
     *
     * Updates the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UpdateUserRequest updateUserRequest = null;
        UserResponse response = api.updateUser(id, updateUserRequest);

        // TODO: test validations
    }
    
}
