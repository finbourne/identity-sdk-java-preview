{
  "openapi": "3.0.1",
  "info": {
    "title": "FINBOURNE Identity Service API",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.0.1626",
    "x-logo": {
      "url": "https://www.lusid.com/app/assets/logo_white.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://www.lusid.com/identity"
    }
  ],
  "paths": {
    "/api/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "[EARLY ACCESS] ListApplications: List Applications",
        "description": "List the available applications",
        "operationId": "ListApplications",
        "responses": {
          "200": {
            "description": "List the available applications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthApplication"
                  }
                },
                "example": [
  {
    "id": "UniqueApplicationId",
    "type": "Native",
    "displayName": "Example Native Application",
    "secret": "123456789",
    "clientId": "my-example-native-app",
    "issuer": "https://exampleiusser.lusid.com"
  }
]
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "[EARLY ACCESS] CreateApplication: Create Application",
        "description": "Create a new Application",
        "operationId": "CreateApplication",
        "requestBody": {
          "description": "Details of the application to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              },
              "example": {
  "displayName": "My First Application",
  "clientId": "my-first-application",
  "type": "Native"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              },
              "example": {
  "displayName": "My First Application",
  "clientId": "my-first-application",
  "type": "Native"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              },
              "example": {
  "displayName": "My First Application",
  "clientId": "my-first-application",
  "type": "Native"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              },
              "example": {
  "displayName": "My First Application",
  "clientId": "my-first-application",
  "type": "Native"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthApplication"
                },
                "example": {
  "id": "UniqueApplicationId",
  "type": "Native",
  "displayName": "Example Native Application",
  "secret": "123456789",
  "clientId": "my-example-native-app",
  "issuer": "https://exampleiusser.lusid.com"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/applications/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "[EARLY ACCESS] GetApplication: Get Application",
        "description": "get the specified application, and optionally the OIDC secret",
        "operationId": "GetApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the application",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the application"
            }
          },
          {
            "name": "includeSecret",
            "in": "query",
            "description": "Optional. If set to true, the application secrets will be returned in plain text",
            "schema": {
              "type": "boolean",
              "description": "Optional. If set to true, the application secrets will be returned in plain text"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get the specified application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthApplication"
                },
                "example": {
  "id": "UniqueApplicationId",
  "type": "Native",
  "displayName": "Example Native Application",
  "secret": "123456789",
  "clientId": "my-example-native-app",
  "issuer": "https://exampleiusser.lusid.com"
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "[EARLY ACCESS] DeleteApplication: Delete Application",
        "description": "Delete the specified application",
        "operationId": "DeleteApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the application",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the application"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/applications/{id}/lifecycle/$newsecret": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "[EXPERIMENTAL] RotateApplicationSecrets: Rotate Application Secrets",
        "description": "Rotate the secrets for the specified application",
        "operationId": "RotateApplicationSecrets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the application",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the application"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rotate Application Secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthApplication"
                },
                "example": {
  "id": "UniqueApplicationId",
  "type": "Native",
  "displayName": "Example Native Application",
  "secret": "123456789",
  "clientId": "my-example-native-app",
  "issuer": "https://exampleiusser.lusid.com"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/authentication/information": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "GetAuthenticationInformation: Gets AuthenticationInformation",
        "description": "Get the AuthenticationInformation associated with the current domain. This includes all the\r\nnecessary information to login to this domain.",
        "operationId": "GetAuthenticationInformation",
        "responses": {
          "200": {
            "description": "Get authentication information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationInformation"
                },
                "example": {
  "issuerUrl": "https://myco.lusid.okta.com/12346",
  "samlIdentityProviderId": "0oa14txx1jAiz7T302p7as"
}
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/authentication/support": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "[EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account",
        "description": "Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues\r\nYou can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.",
        "operationId": "GrantSupportAccess",
        "requestBody": {
          "description": "Request detailing the duration and reasons for supplying support access",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SupportAccessRequest"
              },
              "example": {
  "duration": "PT24H",
  "description": "Investigate issues detailed in support ticket 0604"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportAccessRequest"
              },
              "example": {
  "duration": "PT24H",
  "description": "Investigate issues detailed in support ticket 0604"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportAccessRequest"
              },
              "example": {
  "duration": "PT24H",
  "description": "Investigate issues detailed in support ticket 0604"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SupportAccessRequest"
              },
              "example": {
  "duration": "PT24H",
  "description": "Investigate issues detailed in support ticket 0604"
}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Grant Support Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportAccessResponse"
                },
                "example": {
  "id": "37322a3efbf445fa861d39759ad22dcb",
  "duration": "PT24H",
  "description": "Investigate issues detailed in support ticket 0604",
  "createdAt": "2020-01-06T12:05:00.0000000+00:00",
  "expiry": "2020-01-07T12:05:00.0000000+00:00",
  "createdBy": "UserId-54213",
  "terminated": false
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "[EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account",
        "description": "This will result in a loss of access to your data for all FINBOURNE support agents",
        "operationId": "InvalidateSupportAccess",
        "responses": {
          "200": {
            "description": "Invalidate all currently active support requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportAccessResponse"
                  }
                },
                "example": [
  {
    "id": "37322a3efbf445fa861d39759ad22dcb",
    "duration": "PT24H",
    "description": "Investigate issues detailed in support ticket 0604",
    "createdAt": "2020-01-06T12:05:00.0000000+00:00",
    "expiry": "2020-01-07T12:05:00.0000000+00:00",
    "createdBy": "UserId-54213",
    "terminated": false
  },
  {
    "id": "37322a3efbf445fa861d39759ad22dcb",
    "duration": "PT24H",
    "description": "Investigate issues detailed in support ticket 0604",
    "createdAt": "2020-01-06T12:05:00.0000000+00:00",
    "expiry": "2020-01-07T12:05:00.0000000+00:00",
    "createdBy": "UserId-54213",
    "terminated": true,
    "terminatedAt": "2020-01-06T16:05:00.0000000+00:00",
    "terminatedBy": "UserId-54213"
  }
]
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "[EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination",
        "description": "The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination\r\nincluding obfuscated userIds of those who created and terminated the request",
        "operationId": "GetSupportAccessHistory",
        "responses": {
          "200": {
            "description": "Get support access history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportAccessResponse"
                  }
                },
                "example": [
  {
    "id": "37322a3efbf445fa861d39759ad22dcb",
    "duration": "PT24H",
    "description": "Investigate issues detailed in support ticket 0604",
    "createdAt": "2020-01-06T12:05:00.0000000+00:00",
    "expiry": "2020-01-07T12:05:00.0000000+00:00",
    "createdBy": "UserId-54213",
    "terminated": false
  },
  {
    "id": "37322a3efbf445fa861d39759ad22dcb",
    "duration": "PT24H",
    "description": "Investigate issues detailed in support ticket 0604",
    "createdAt": "2020-01-06T12:05:00.0000000+00:00",
    "expiry": "2020-01-07T12:05:00.0000000+00:00",
    "createdBy": "UserId-54213",
    "terminated": true,
    "terminatedAt": "2020-01-06T16:05:00.0000000+00:00",
    "terminatedBy": "UserId-54213"
  }
]
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/directory": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] FindUsersById: Find users by id endpoint",
        "description": "Finds a maximum of 50 users by ID",
        "operationId": "FindUsersById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "A list of unique identifiers for the users",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of unique identifiers for the users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse"
                },
                "example": {
  "href": "https://my-domain.lusid.com/access",
  "values": {
    "00ub0oNGTSWTBKOLGLNR": {
      "id": "00ub0oNGTSWTBKOLGLNR",
      "login": "dennis.sierra",
      "email": "Dennis",
      "firstName": "Sierra",
      "lastName": "dennis.sierra@my-awesome-company.com",
      "type": "Personal",
      "links": [
        {
          "relation": "User",
          "href": "https://my-domain.lusid.com/access/api/users/00ub0oNGTSWTBKOLGLNR?includeRoles=false",
          "description": "A link to access the full details of this user",
          "method": "GET"
        },
        {
          "relation": "Activity",
          "href": "https://my-domain.lusid.com/insights/api/requests?filter=user%20eq%20%2700ub0oNGTSWTBKOLGLNR%27",
          "description": "A link to the LUSID Insights API to get all logs related to this user",
          "method": "GET"
        }
      ]
    },
    "00uijntSwJjSHtDY70g3": {
      "id": "00uijntSwJjSHtDY70g3",
      "login": "rudi.kouma",
      "email": "Rudi",
      "firstName": "Kouma",
      "lastName": "rudi.kouma@my-awesome-company.com",
      "type": "Personal",
      "links": [
        {
          "relation": "User",
          "href": "https://my-domain.lusid.com/access/api/users/00uijntSwJjSHtDY70g3?includeRoles=false",
          "description": "A link to access the full details of this user",
          "method": "GET"
        },
        {
          "relation": "Activity",
          "href": "https://my-domain.lusid.com/insights/api/requests?filter=user%20eq%20%2700uijntSwJjSHtDY70g3%27",
          "description": "A link to the LUSID Insights API to get all logs related to this user",
          "method": "GET"
        }
      ]
    }
  },
  "failed": {
    "00u19uiKQa0xXkbdGLNR": {
      "id": "00u19uiKQa0xXkbdGLNR",
      "type": "UserDoesNotExist",
      "detail": "The specified user cannot be found or has been deleted"
    }
  },
  "links": [
    {
      "relation": "RequestLogs",
      "href": "https://mydomain.lusid.com/app/insights/logs/0ABCDEFGHIJKL:00000001",
      "description": "A link to the LUSID Insights website showing all logs related to this request",
      "method": "GET"
    }
  ]
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/domains": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "CreateDomain: Create Domain",
        "description": "Creates a Domain",
        "operationId": "CreateDomain",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The verification code necessary to create domains",
            "required": true,
            "schema": {
              "maxLength": 262144,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "The verification code necessary to create domains"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the domain",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDomainRequest"
              },
              "example": {
  "domain": "MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "firstName": "Owner",
    "lastName": "OfAccount",
    "emailAddress": "owner.ofaccount@myco.com",
    "login": "owner.ofaccount@myco.com",
    "type": "Personal"
  },
  "signedAgreements": [
    "TermsAndConditions_01012019_Gb"
  ]
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDomainRequest"
              },
              "example": {
  "domain": "MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "firstName": "Owner",
    "lastName": "OfAccount",
    "emailAddress": "owner.ofaccount@myco.com",
    "login": "owner.ofaccount@myco.com",
    "type": "Personal"
  },
  "signedAgreements": [
    "TermsAndConditions_01012019_Gb"
  ]
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDomainRequest"
              },
              "example": {
  "domain": "MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "firstName": "Owner",
    "lastName": "OfAccount",
    "emailAddress": "owner.ofaccount@myco.com",
    "login": "owner.ofaccount@myco.com",
    "type": "Personal"
  },
  "signedAgreements": [
    "TermsAndConditions_01012019_Gb"
  ]
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDomainRequest"
              },
              "example": {
  "domain": "MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "firstName": "Owner",
    "lastName": "OfAccount",
    "emailAddress": "owner.ofaccount@myco.com",
    "login": "owner.ofaccount@myco.com",
    "type": "Personal"
  },
  "signedAgreements": [
    "TermsAndConditions_01012019_Gb"
  ]
}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created domain",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/domains/me": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "GetMyDomain: Get current Domain",
        "description": "Gets the Domain of the requesting User",
        "operationId": "GetMyDomain",
        "responses": {
          "200": {
            "description": "The current domain",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                },
                "example": {
  "id": {
    "name": "MyCo"
  },
  "description": "US subsidiary of MyCo",
  "companyName": "MyCo USA",
  "owner": {
    "value": "DomainOwnerUserId"
  },
  "billingContact": {
    "value": "BillingContactUserId"
  },
  "technicalContact": {
    "value": "TechnicalContactUserId"
  },
  "created": "2018-12-08T13:30:00.0000000+00:00"
}
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/domains/me/agreements": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "ListAgreements: List Agreements",
        "description": "Lists the signed agreements for the current domain",
        "operationId": "ListAgreements",
        "responses": {
          "200": {
            "description": "List the signed agreements for the current domain",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AgreementResponse"
                  }
                },
                "example": {
  "termsAndConditions-20190301-GBP": {
    "name": "TermsAndConditions-20190301-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-03-07T13:23:07.0000000+00:00"
  },
  "termsAndConditions-20190101-GBP": {
    "name": "TermsAndConditions-20190101-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-01-05T10:15:00.0000000+00:00"
  }
}
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AgreementResponse"
                  }
                },
                "example": {
  "termsAndConditions-20190301-GBP": {
    "name": "TermsAndConditions-20190301-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-03-07T13:23:07.0000000+00:00"
  },
  "termsAndConditions-20190101-GBP": {
    "name": "TermsAndConditions-20190101-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-01-05T10:15:00.0000000+00:00"
  }
}
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AgreementResponse"
                  }
                },
                "example": {
  "termsAndConditions-20190301-GBP": {
    "name": "TermsAndConditions-20190301-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-03-07T13:23:07.0000000+00:00"
  },
  "termsAndConditions-20190101-GBP": {
    "name": "TermsAndConditions-20190101-GB",
    "signedBy": "DomainOwnerUserId",
    "signedAt": "2019-01-05T10:15:00.0000000+00:00"
  }
}
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/domains/me/agreements/{agreement}": {
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "SignAgreement: Sign Agreement",
        "description": "Signs a specified agreement. Only the owner of a domain can sign an agreement",
        "operationId": "SignAgreement",
        "parameters": [
          {
            "name": "agreement",
            "in": "path",
            "description": "Name of the agreement being signed",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "Name of the agreement being signed"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Signs a specified agreement",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementResponse"
                },
                "example": {
  "name": "TermsAndConditions-20190101-GB",
  "signedBy": "DomainOwnerUserId",
  "signedAt": "2019-01-05T10:15:00.0000000+00:00"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementResponse"
                },
                "example": {
  "name": "TermsAndConditions-20190101-GB",
  "signedBy": "DomainOwnerUserId",
  "signedAt": "2019-01-05T10:15:00.0000000+00:00"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementResponse"
                },
                "example": {
  "name": "TermsAndConditions-20190101-GB",
  "signedBy": "DomainOwnerUserId",
  "signedAt": "2019-01-05T10:15:00.0000000+00:00"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "head": {
        "tags": [
          "Domains"
        ],
        "summary": "GetAgreement: Get Agreement",
        "description": "Check whether the domain has signed a specific agreement",
        "operationId": "GetAgreement",
        "parameters": [
          {
            "name": "agreement",
            "in": "path",
            "description": "Name of the agreement",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "Name of the agreement"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Whether agreement is signed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/keys": {
      "post": {
        "tags": [
          "Personal Authentication Tokens"
        ],
        "summary": "[EARLY ACCESS] CreateApiKey: Create a Personal Access Token",
        "description": "Generates a Personal Access Token and returns the new key and its associated metadata.",
        "operationId": "CreateApiKey",
        "requestBody": {
          "description": "The request to create a new Personal Access Token",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKey"
              },
              "example": {
  "displayName": "My API Key",
  "deactivationDate": "2022-12-08T13:30:12.0000000+00:00"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKey"
              },
              "example": {
  "displayName": "My API Key",
  "deactivationDate": "2022-12-08T13:30:12.0000000+00:00"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKey"
              },
              "example": {
  "displayName": "My API Key",
  "deactivationDate": "2022-12-08T13:30:12.0000000+00:00"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKey"
              },
              "example": {
  "displayName": "My API Key",
  "deactivationDate": "2022-12-08T13:30:12.0000000+00:00"
}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Personal Access Token and associated meta data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedApiKey"
                },
                "example": {
  "key": "ba5e8bed1cbd92f3cc4a893a48141ff23617b258cb7f1407f3567d1f35d0f0e0",
  "id": "f45fcf4e7942422bb6c99ff74de30f40",
  "displayName": "Automated system A's key",
  "createdDate": "2020-01-01T00:00:00.0000000+00:00",
  "deactivationDate": "2020-06-01T00:00:00.0000000+00:00"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Personal Authentication Tokens"
        ],
        "summary": "[EARLY ACCESS] ListOwnApiKeys: Gets the meta data for all of the user's existing Personal Access Tokens.",
        "description": "Gets the meta data for all of the user's Personal Access Tokens that have not been deleted. They may be\r\ninvalid due to the deactivation date having passed.",
        "operationId": "ListOwnApiKeys",
        "responses": {
          "200": {
            "description": "List of user's existing Personal Access Tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                },
                "example": [
  {
    "id": "f45fcf4e7942422bb6c99ff74de30f40",
    "displayName": "Automated system A's key",
    "createdDate": "2020-01-01T00:00:00.0000000+00:00",
    "deactivationDate": "2020-06-01T00:00:00.0000000+00:00"
  },
  {
    "id": "89762a35ce3649b5b92f47168611a534",
    "displayName": "Automated system B's key",
    "createdDate": "2020-01-02T00:00:00.0000000+00:00",
    "deactivationDate": "2020-06-02T00:00:00.0000000+00:00"
  },
  {
    "id": "bd772a807cab49c0bcac565c8dbd7a20",
    "displayName": "Automated system C's key",
    "createdDate": "2020-01-03T00:00:00.0000000+00:00",
    "deactivationDate": "2020-06-03T00:00:00.0000000+00:00"
  }
]
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/keys/{id}": {
      "delete": {
        "tags": [
          "Personal Authentication Tokens"
        ],
        "summary": "[EARLY ACCESS] DeleteApiKey: Invalidate a Personal Access Token",
        "description": "Immediately invalidates the specified Personal Access Token",
        "operationId": "DeleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Personal Access Token to delete",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The id of the Personal Access Token to delete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invalidates a Personal Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "example": {
  "id": "f45fcf4e7942422bb6c99ff74de30f40",
  "displayName": "Automated system A's key",
  "createdDate": "2020-01-01T00:00:00.0000000+00:00",
  "deactivationDate": "2020-08-01T00:00:00.0000000+00:00"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "[EARLY ACCESS] GetUserInfo: Get User Info",
        "description": "Get the requesting user's basic info",
        "operationId": "GetUserInfo",
        "responses": {
          "200": {
            "description": "Get the specified user's info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                },
                "example": {
  "id": "asybvrs5",
  "emailAddress": "joe.bloggs@myco.com",
  "type": "Personal"
}
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/me/password": {
      "put": {
        "tags": [
          "Me"
        ],
        "summary": "[EXPERIMENTAL] SetPassword: Set password of current user",
        "description": "Set the password of the current user to the specified value.\r\n            \r\nNote this is feature is only available to Service users authenticated using OpenID. For further information\r\nrelating to usage of this feature please consult the documentation.",
        "operationId": "SetPassword",
        "requestBody": {
          "description": "The request containing the new password value",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPassword"
              },
              "example": {
  "value": ""
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPassword"
              },
              "example": {
  "value": ""
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPassword"
              },
              "example": {
  "value": ""
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPassword"
              },
              "example": {
  "value": ""
}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set the current user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPasswordResponse"
                },
                "example": {
  "updatedAt": "2022-12-25T12:00:00.0000000+00:00"
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] ListAccessControlledResources: Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/eap": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] GetRegistrationAvailability: Check Registration availability",
        "description": "Identify whether there registrations service is available",
        "operationId": "GetRegistrationAvailability",
        "responses": {
          "200": {
            "description": "Registration availability state",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] ListRoles: List Roles",
        "description": "List the available Roles",
        "operationId": "ListRoles",
        "responses": {
          "200": {
            "description": "List the available roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                },
                "example": [
  {
    "id": "asnvr5ne35",
    "roleId": {
      "scope": "LUSID",
      "code": "FrontOfficeAdministrator"
    },
    "source": "LusidUser",
    "name": "LUSID:FrontOfficeAdministrator",
    "description": "Front office administration role"
  }
]
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] CreateRole: Create Role",
        "description": "Creates a new Role",
        "operationId": "CreateRole",
        "requestBody": {
          "description": "Details of the role to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              },
              "example": {
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              },
              "example": {
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              },
              "example": {
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              },
              "example": {
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "example": {
  "id": "asnvr5ne35",
  "roleId": {
    "scope": "LUSID",
    "code": "FrontOfficeAdministrator"
  },
  "source": "LusidUser",
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
              }
            }
          },
          "409": {
            "description": "A role with the same Name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] GetRole: Get Role",
        "description": "Get the specified role",
        "operationId": "GetRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the role",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the specified role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "example": {
  "id": "asnvr5ne35",
  "roleId": {
    "scope": "LUSID",
    "code": "FrontOfficeAdministrator"
  },
  "source": "LusidUser",
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] DeleteRole: Delete Role",
        "description": "Delete the specified role",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the role",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] UpdateRole: Update Role",
        "description": "Update the specified Role",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the role to be updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the role to be updated"
            }
          }
        ],
        "requestBody": {
          "description": "The new definition of the role",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              },
              "example": {
  "description": "Front office administration role"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              },
              "example": {
  "description": "Front office administration role"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              },
              "example": {
  "description": "Front office administration role"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              },
              "example": {
  "description": "Front office administration role"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "example": {
  "id": "asnvr5ne35",
  "roleId": {
    "scope": "LUSID",
    "code": "FrontOfficeAdministrator"
  },
  "source": "LusidUser",
  "name": "LUSID:FrontOfficeAdministrator",
  "description": "Front office administration role"
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/roles/{id}/users": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] ListUsersInRole: Get the users in the specified role.",
        "description": "List all Users in the specified Role",
        "operationId": "ListUsersInRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Role",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users in the role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                },
                "example": [
  {
    "id": "asybvrs5",
    "emailAddress": "joe.bloggs@myco.com",
    "login": "joe.bloggs@myco.com",
    "firstName": "Joe",
    "lastName": "Bloggs",
    "roles": [
      {
        "id": "customrole1",
        "roleId": {
          "scope": "default",
          "code": "customrole2"
        },
        "source": "LusidUser",
        "name": "Front Office Administrator",
        "description": "Administration role for Front Office staff"
      }
    ],
    "type": "Personal",
    "status": "ACTIVE",
    "external": false
  }
]
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/roles/{id}/users/{userId}": {
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] AddUserToRole: Add User to Role",
        "description": "Adds the User to the specified Role",
        "operationId": "AddUserToRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Role",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the Role"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier for the User",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "[EARLY ACCESS] RemoveUserFromRole: Remove User from Role",
        "description": "Removes the User from the specified Role",
        "operationId": "RemoveUserFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Role",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the Role"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier for the User",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/tokens": {
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "[EARLY ACCESS] InvalidateToken: Invalidate current JWT token (sign out)",
        "description": "Log the current user out of all Finbourne platforms by invalidating the current token",
        "operationId": "InvalidateToken",
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] ListUsers: List Users",
        "description": "List the available Users",
        "operationId": "ListUsers",
        "parameters": [
          {
            "name": "includeRoles",
            "in": "query",
            "description": "Flag indicating that the users roles should be included in the response",
            "schema": {
              "type": "boolean",
              "description": "Flag indicating that the users roles should be included in the response",
              "default": false
            },
            "x-nullable": true
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Include previously deleted (not purged) users",
            "schema": {
              "type": "boolean",
              "description": "Include previously deleted (not purged) users",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "List the available users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                },
                "example": [
  {
    "id": "asybvrs5",
    "emailAddress": "joe.bloggs@myco.com",
    "login": "joe.bloggs@myco.com",
    "firstName": "Joe",
    "lastName": "Bloggs",
    "roles": [
      {
        "id": "customrole1",
        "roleId": {
          "scope": "default",
          "code": "customrole2"
        },
        "source": "LusidUser",
        "name": "Front Office Administrator",
        "description": "Administration role for Front Office staff"
      }
    ],
    "type": "Personal",
    "status": "ACTIVE",
    "external": false
  }
]
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] CreateUser: Create User",
        "description": "Create a new User",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "waitForReindex",
            "in": "query",
            "description": "Should the request wait until the newly created User is indexed (available in List) before returning",
            "schema": {
              "type": "boolean",
              "description": "Should the request wait until the newly created User is indexed (available in List) before returning",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "Details of the User to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "type": "Personal"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "type": "Personal"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "type": "Personal"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "type": "Personal"
}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "id": "asybvrs5",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "firstName": "Joe",
  "lastName": "Bloggs",
  "roles": [
    {
      "id": "customrole1",
      "roleId": {
        "scope": "default",
        "code": "customrole2"
      },
      "source": "LusidUser",
      "name": "Front Office Administrator",
      "description": "Administration role for Front Office staff"
    }
  ],
  "type": "Personal",
  "status": "ACTIVE",
  "external": false
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] GetUser: Get User",
        "description": "Get the specified User",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User"
            }
          },
          {
            "name": "includeRoles",
            "in": "query",
            "description": "Flag indicating that the users roles should be included in the response",
            "schema": {
              "type": "boolean",
              "description": "Flag indicating that the users roles should be included in the response",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get the specified user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "id": "asybvrs5",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "firstName": "Joe",
  "lastName": "Bloggs",
  "roles": [
    {
      "id": "customrole1",
      "roleId": {
        "scope": "default",
        "code": "customrole2"
      },
      "source": "LusidUser",
      "name": "Front Office Administrator",
      "description": "Administration role for Front Office staff"
    }
  ],
  "type": "Personal",
  "status": "ACTIVE",
  "external": false
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] DeleteUser: Delete User",
        "description": "By default the user will be de-provisioned and inactive, however their record will remain in the identity\r\nprovider for audit purposes. If this is not desirable and removal of all trace of the user is required,\r\nthe purge parameter can be specified to indicate the details should be purged completely.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the user",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the user"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "Whether to purge any trace of the user from the identity provider (will affect audit)",
            "schema": {
              "type": "boolean",
              "description": "Whether to purge any trace of the user from the identity provider (will affect audit)"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "[EARLY ACCESS] UpdateUser: Update User",
        "description": "Updates the specified User",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User to be updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User to be updated"
            }
          }
        ],
        "requestBody": {
          "description": "The new definition of the User",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "example": {
  "firstName": "Joe",
  "lastName": "Bloggs",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com"
}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "id": "asybvrs5",
  "emailAddress": "joe.bloggs@myco.com",
  "login": "joe.bloggs@myco.com",
  "firstName": "Joe",
  "lastName": "Bloggs",
  "roles": [
    {
      "id": "customrole1",
      "roleId": {
        "scope": "default",
        "code": "customrole2"
      },
      "source": "LusidUser",
      "name": "Front Office Administrator",
      "description": "Administration role for Front Office staff"
    }
  ],
  "type": "Personal",
  "status": "ACTIVE",
  "external": false
}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/users/{id}/lifecycle/$activate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[BETA] SendActivationEmail: Sends an activation email to the User",
        "description": "Sends an activation email to the specified User",
        "operationId": "SendActivationEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User to be activated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User to be activated"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/users/{id}/lifecycle/$expirepassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[BETA] ExpirePassword: Reset the user's password to a temporary one",
        "description": "Resets the user's password to a temporary one which is then expired",
        "operationId": "ExpirePassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User having its password reset",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User having its password reset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset the user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryPassword"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/users/{id}/lifecycle/$resetfactors": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[BETA] ResetFactors: Reset MFA factors",
        "description": "Resets the MFA factors of the specified User",
        "operationId": "ResetFactors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User having their MFA factors reset",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User having their MFA factors reset"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/users/{id}/lifecycle/$resetpassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[BETA] ResetPassword: Reset Password",
        "description": "Resets the password of the specified User",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User having their password reset",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User having their password reset"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/users/{id}/lifecycle/$unlock": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "[BETA] UnlockUser: Unlock User",
        "description": "Unlocks the specified User",
        "operationId": "UnlockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the User to be unlocked",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The unique identifier for the User to be unlocked"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    }
  },
  "components": {
    "schemas": {
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            }
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AgreementResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agreement",
            "nullable": true
          },
          "signedBy": {
            "type": "string",
            "description": "UserID (obfuscated) of the user who signed this agreement",
            "nullable": true
          },
          "signedAt": {
            "type": "string",
            "description": "Datetime at which the agreement was signed",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Agreement DTO"
      },
      "ApiKey": {
        "required": [
          "createdDate",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The unique Id of the API key"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the API key"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date of the API key",
            "format": "date-time"
          },
          "deactivationDate": {
            "type": "string",
            "description": "The deactivation date of the API key",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The metadata of an API key"
      },
      "AuthenticationInformation": {
        "required": [
          "issuerUrl"
        ],
        "type": "object",
        "properties": {
          "issuerUrl": {
            "type": "string"
          },
          "samlIdentityProviderId": {
            "type": "string",
            "nullable": true
          },
          "support": {
            "$ref": "#/components/schemas/SupportAccessExpiry"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateApiKey": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name for the API key"
          },
          "deactivationDate": {
            "type": "string",
            "description": "The optional date at which the key should deactivate",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create an API key"
      },
      "CreateApplicationRequest": {
        "required": [
          "clientId",
          "displayName",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The Display Name of the application"
          },
          "clientId": {
            "maxLength": 50,
            "minLength": 6,
            "pattern": "^[a-zA-Z][a-zA-Z0-9-]{5,49}",
            "type": "string",
            "description": "The OpenID Connect ClientId of the application"
          },
          "type": {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-zA-Z]*$",
            "type": "string",
            "description": "The Type of the application. This must be either Native or Web"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A web application's acceptable list of post-login redirect URIs",
            "nullable": true
          },
          "postLogoutRedirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A web application's acceptable list of post-logout redirect URIs",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create an application for authenticating the source of token requests"
      },
      "CreatedApiKey": {
        "required": [
          "createdDate",
          "displayName",
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The API Key value"
          },
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The unique Id of the API key"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the API key"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date of the API key",
            "format": "date-time"
          },
          "deactivationDate": {
            "type": "string",
            "description": "The deactivation date of the API key",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A newly created API key"
      },
      "CreateDomainRequest": {
        "required": [
          "companyName",
          "domain",
          "owner"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "maxLength": 25,
            "minLength": 3,
            "pattern": "^[a-zA-Z]([a-zA-Z0-9-]*[a-zA-Z0-9])?$",
            "type": "string",
            "description": "The name LUSID domain to create"
          },
          "description": {
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "Optional. Free text description of the domain.",
            "nullable": true
          },
          "companyName": {
            "maxLength": 50,
            "minLength": 2,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the company to which the domain is registered"
          },
          "owner": {
            "$ref": "#/components/schemas/CreateUserRequest"
          },
          "technicalContact": {
            "$ref": "#/components/schemas/CreateUserRequest"
          },
          "billingContact": {
            "$ref": "#/components/schemas/CreateUserRequest"
          },
          "signedAgreements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional. If Terms and Conditions agreements have been signed during the sign up process",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRoleRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9-_ +]{2,100}$",
            "type": "string",
            "description": "The role name, which must be unique within the system."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description for this role",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies the information required to create a new role."
      },
      "CreateUserRequest": {
        "required": [
          "emailAddress",
          "firstName",
          "lastName",
          "login",
          "type"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The first name of the user"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The last name of the user"
          },
          "emailAddress": {
            "maxLength": 80,
            "minLength": 5,
            "type": "string",
            "description": "The user's email address - to which the account validation email will be sent. For user accounts\r\nthis should exactly match the Login."
          },
          "login": {
            "maxLength": 80,
            "minLength": 5,
            "type": "string",
            "description": "The user's login username, in the form of an email address, which must be unique within the system.\r\nFor user accounts this should exactly match the user's email address."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleId"
            },
            "description": "Optional. Any known roles the user should be created with.",
            "nullable": true
          },
          "type": {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-zA-Z]*$",
            "type": "string",
            "description": "The type of user (e.g. Personal or Service)"
          }
        },
        "additionalProperties": false,
        "description": "Details necessary for creating a new user"
      },
      "CurrentUserResponse": {
        "required": [
          "emailAddress",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user's system supplied unique identifier"
          },
          "emailAddress": {
            "type": "string",
            "description": "The user's email address which may be null depending on the authentication method"
          },
          "type": {
            "type": "string",
            "description": "The type of user (e.g. Personal or Service)"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainId": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DomainResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DomainId"
          },
          "description": {
            "type": "string",
            "description": "A description of the domain",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name for the domain",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserId"
          },
          "billingContact": {
            "$ref": "#/components/schemas/UserId"
          },
          "technicalContact": {
            "$ref": "#/components/schemas/UserId"
          },
          "created": {
            "type": "string",
            "description": "The",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity this error relates to",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Error type",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Human readable description of the error",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides details about an entity error that occured"
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ListUsersResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "Uri of this response",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserSummary"
            },
            "description": "Successful entities, indexed by their id",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "Failed entities, indexed by their id",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Users directory query response"
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OAuthApplication": {
        "required": [
          "clientId",
          "displayName",
          "id",
          "issuer",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleId": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "code": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RoleResponse": {
        "required": [
          "id",
          "name",
          "roleId",
          "source"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The role's system supplied unique identifier"
          },
          "roleId": {
            "$ref": "#/components/schemas/RoleId"
          },
          "source": {
            "type": "string",
            "description": "The source of the role"
          },
          "name": {
            "type": "string",
            "description": "The role name, which must be unique within the system."
          },
          "description": {
            "type": "string",
            "description": "The description for this role",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPassword": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 50,
            "minLength": 12,
            "type": "string",
            "description": "The value of the new password"
          }
        },
        "additionalProperties": false,
        "description": "Set password request"
      },
      "SetPasswordResponse": {
        "required": [
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "description": "The date and time at which the password was successfully updated",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The result of setting a password"
      },
      "SupportAccessExpiry": {
        "required": [
          "expiry"
        ],
        "type": "object",
        "properties": {
          "expiry": {
            "type": "string",
            "description": "DateTimeOffset at which the access will be revoked",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Time at which the support access expires"
      },
      "SupportAccessRequest": {
        "required": [
          "duration"
        ],
        "type": "object",
        "properties": {
          "duration": {
            "maxLength": 30,
            "minLength": 2,
            "pattern": "^P(?!$)((\\d+Y)|(\\d+\\.\\d+Y$))?((\\d+M)|(\\d+\\.\\d+M$))?((\\d+W)|(\\d+\\.\\d+W$))?((\\d+D)|(\\d+\\.\\d+D$))?(T(?=\\d)((\\d+H)|(\\d+\\.\\d+H$))?((\\d+M)|(\\d+\\.\\d+M$))?(\\d+(\\.\\d+)?S)?)??$",
            "type": "string",
            "description": "The duration for which access is requested (in any ISO-8601 format)"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of why the support access has been granted (i.e. support ticket numbers)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Request to grant support access to your account"
      },
      "SupportAccessResponse": {
        "required": [
          "createdAt",
          "createdBy",
          "duration",
          "expiry",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the support access request"
          },
          "duration": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string",
            "description": "The duration for which access is requested (in any ISO-8601 format)"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of why the support access has been granted (i.e. support ticket numbers)",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "DateTimeOffset at which the access was granted",
            "format": "date-time"
          },
          "expiry": {
            "type": "string",
            "description": "DateTimeOffset at which the access will be revoked",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "Obfuscated UserId of the user who granted the support access"
          },
          "terminated": {
            "type": "boolean",
            "description": "Whether or not that access has been invalidated"
          },
          "terminatedAt": {
            "type": "string",
            "description": "DateTimeOffset at which the access was invalidated",
            "format": "date-time",
            "nullable": true
          },
          "terminatedBy": {
            "type": "string",
            "description": "Obfuscated UserId of the user who revoked the access",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Timestamped successful response to grant access to your account"
      },
      "TemporaryPassword": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The user's temporary password"
          }
        },
        "additionalProperties": false
      },
      "UpdateRoleRequest": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description for this role",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserRequest": {
        "required": [
          "emailAddress",
          "firstName",
          "lastName",
          "login"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "emailAddress": {
            "maxLength": 80,
            "minLength": 5,
            "type": "string"
          },
          "login": {
            "maxLength": 80,
            "minLength": 5,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The user's login username, in the form of an email address, which must be unique within the system.\r\nFor user accounts this should exactly match the user's email address."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleId"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserId": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "required": [
          "emailAddress",
          "external",
          "firstName",
          "id",
          "lastName",
          "login",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user's system supplied unique identifier"
          },
          "emailAddress": {
            "type": "string",
            "description": "The user's emailAddress address, which must be unique within the system"
          },
          "login": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            },
            "description": "The roles that the user has.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of user (e.g. Personal or Service)"
          },
          "status": {
            "type": "string",
            "description": "The status of the user"
          },
          "external": {
            "type": "boolean",
            "description": "Whether or not the user originates from an external identity system"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user id",
            "nullable": true
          },
          "login": {
            "type": "string",
            "description": "The user login",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address registered for that user",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "User's type (Personal, Service...)",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lightweight view of an user details"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://lusid.okta.com/oauth2/default/v1/authorize",
            "scopes": { }
          }
        }
      }
    }
  },
  "security": [
    { }
  ],
  "tags": [
    {
      "name": "Application Metadata",
      "description": "Endpoints for querying application metadata"
    },
    {
      "name": "Applications",
      "description": "Endpoints for administering Applications"
    },
    {
      "name": "Authentication",
      "description": "Endpoints for getting authentication details for the domain"
    },
    {
      "name": "Domains",
      "description": "Endpoints for administering Domains"
    },
    {
      "name": "Me",
      "description": "Endpoints for getting more information about the current User"
    },
    {
      "name": "Personal Authentication Tokens",
      "description": "Endpoints for administering one's own Personal Access Tokens"
    },
    {
      "name": "Roles",
      "description": "Endpoints for administering Roles"
    },
    {
      "name": "Tokens",
      "description": "Endpoints for administering Users"
    },
    {
      "name": "Users",
      "description": "Endpoints for querying the users directory"
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Application Metadata",
      "Applications",
      "Authentication",
      "Domains",
      "Me",
      "Personal Authentication Tokens",
      "Roles",
      "Tokens",
      "Users"
    ]
  }
}